kubectl cluster-info    # Display addresses of the master and services
kubectl api-resources
kubectl api-resources --namespaced=true      # All namespaced resources
kubectl api-resources --namespaced=false     # All non-namespaced resources
kubectl api-resources --verbs=list,get       # All resources that support the "list" and "get" request verbs

kubectl config view # Show Merged kubeconfig settings.
kubectl config get-contexts                          # display list of contexts 
kubectl config current-context                       # display the current-context
kubectl config use-context my-cluster-name           # set the default context to my-cluster-name

kubectl create deployment nginx --image=nginx  # start a single instance of nginx
kubectl run nginx --image=nginx -n mynamespace      # Start a single instance of nginx pod in the namespace of mynamespace
kubectl run nginx --image=nginx --dry-run=client -o yaml > pod.yaml # Run pod nginx and write its spec into a file called pod.yaml

kubectl auth can-i create deployments --namespace dev 
kubectl auth can-i list secrets --namespace dev --as dave

kubectl explain pods                           # get the documentation for pod manifests
# Get commands with basic output
kubectl get services                          # List all services in the namespace
kubectl get pods --all-namespaces             # List all pods in all namespaces
kubectl get pods -o wide                      # List all pods in the current namespace, with more details
kubectl get deployment my-dep                 # List a particular deployment
kubectl get pods                              # List all pods in the namespace
kubectl get pod my-pod -o yaml                # Get a pod's YAML
kubectl get endpoints                         # List service endpoints

kubectl expose deployment/my-app --type=LoadBalancer --name=my-service # Expose deployment as lb service

# Describe commands with verbose output
kubectl describe nodes my-node
kubectl describe pods my-pod
# Show labels for all pods (or any other Kubernetes object that supports labelling)
kubectl get pods --show-labels
# List Events sorted by timestamp
kubectl get events --sort-by=.metadata.creationTimestamp
kubectl set image deployment/frontend www=image:v2               # Rolling update "www" containers of "frontend" deployment, updating the image
kubectl rollout history deployment/frontend                      # Check the history of deployments including the revision 
kubectl rollout undo deployment/frontend                         # Rollback to the previous deployment
kubectl rollout undo deployment/frontend --to-revision=2         # Rollback to a specific revision
kubectl rollout status -w deployment/frontend                    # Watch rolling update status of "frontend" deployment until completion
kubectl rollout restart deployment/frontend                      # Rolling restart of the "frontend" deployment
# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000
kubectl expose deployment nginx --port=80 --target-port=8000
kubectl label pods my-pod new-label=awesome                      # Add a Label
kubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       # Add an annotation
kubectl autoscale deployment foo --min=2 --max=10                # Auto scale a deployment "foo"
kubectl edit svc/docker-registry 
kubectl scale --replicas=3 deployment/mysql  # If the deployment named mysql's current size is 2, scale mysql to 3
kubectl delete -f ./pod.yaml
kubectl delete pod,service baz foo                                # Delete pods and services with same names "baz" and "foo"
kubectl logs my-pod                                 # dump pod logs (stdout)
kubectl logs -f my-pod # stream pod logs (stdout)
kubectl port-forward deploy/my-deployment 5000:6000       # listen on local port 5000 and forward to port 6000 on a Pod created by <my-deployment>
kubectl port-forward my-pod 5000:6000               # Listen on port 5000 on the local machine and forward to port 6000 on my-pod
kubectl exec -it deployment -- bash                         # Run command in existing pod (1 container case)
kubectl top pod POD_NAME --sort-by=cpu              # Show metrics for a given pod and sort it by 'cpu' or 'memory'

kubectl cordon my-node                                                # Mark my-node as unschedulable
kubectl drain my-node                                                 # Drain my-node in preparation for maintenance
kubectl uncordon my-node                                              # Mark my-node as schedulable
kubectl top node my-node                                              # Show metrics for a given node

kubectl get pv,pvc
kubectl get pods -o json
kubectl get pods -o=jsonpath='{.items[0].metadata.name}'

kubectl get secrets --all-namespaces


# https://github.com/dennyzhang/cheatsheet-kubernetes-A4

# CREATING PLUGINS WITH KUBERNETES
https://kubernetes.io/docs/reference/kubectl/



